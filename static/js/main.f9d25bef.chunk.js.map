{"version":3,"sources":["components/Employees.js","components/Search.js","utils/API.js","components/Directory.js","App.js","index.js"],"names":["Employees","props","dateOfBirth","date","dateArray","split","year","join","formatDate","dob","className","alt","firstName","src","icon","lastName","email","phone","address","Search","placeholder","name","type","onChange","event","startSort","axios","get","Directory","state","employees","empSort","search","sorted","componentDidMount","API","then","results","setState","data","sortEmp","filter","first","toLowerCase","includes","last","target","value","render","label","map","employee","picture","medium","location","street","number","id","city","postcode","Component","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9d25bef.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Employees = (props) => {\n  // The API response of dates looks like: 1972-08-30T05:36:46.599Z\n  // That's difficult to read, so formatDate sets up dates as ??-??-???? in Month-Day-Year format.\n  function formatDate(date) {\n    const dateArray = date.split(\"-\");\n    const year = dateArray[0];\n    const month = dateArray[1];\n    const dayArray = dateArray[2].split(\"T\");\n    const day = dayArray[0];\n    const formattedDate = [month, day, year].join(\"-\");\n    return formattedDate;\n  }\n\n  // dateOfBirth variable allows me to cleanly call formatDate on the props in the below JSX\n  let dateOfBirth = formatDate(props.dob);\n\n  return (\n    <tr className=\"tr\">\n      <td>\n        <img alt={props.firstName} src={props.icon} />\n      </td>\n      <td>\n        {props.firstName} {props.lastName}\n      </td>\n      <td>{props.email}</td>\n      <td>{props.phone} </td>\n      <td>{dateOfBirth}</td>\n      <td>{props.address}</td>\n    </tr>\n  );\n};\n\nexport default Employees;\n","import React from \"react\";\n\nconst Search = (props) => {\n  return (\n    <div className=\"d-flex justify-content-Left mx-auto\">\n      <form>\n        <input\n          placeholder=\"Search For Employee\"\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control-lg search-font mx-auto\"\n          onChange={(event) => props.startSort(event)}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Search;\n","import axios from \"axios\";\n\nexport default {\n  \n  getUsers: function () {\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\n  },\n};\n","import React, { Component } from \"react\";\nimport Employees from \"./Employees.js\";\nimport Search from \"./Search.js\";\nimport API from \"../utils/API\";\nimport \"../styles/Directory.css\";\n\nclass Directory extends Component {\n  state = {\n    employees: [],\n    empSort: [],\n    search: \"\",\n    sorted: false,\n  };\n\n  // check that the component rendered at least once, and pull in our data\n  // wait for the information to come back\n  componentDidMount = () => {\n    API.getUsers().then((results) => {\n      this.setState({\n        employees: results.data.results,\n      });\n    });\n  };\n\n  // sort through employees based on search term\n  // check if there is a match and set that to empSort for rendering\n  sortEmp = () => {\n    let { employees, search } = this.state;\n    let empSort = employees.filter((sorted) => {\n      return (\n        sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\n        sorted.name.last.toLowerCase().includes(search.toLowerCase()) ||\n        sorted.email.toLowerCase().includes(search.toLowerCase())\n      );\n    });\n    this.setState({ empSort });\n  };\n\n  // grab search term, activate sorted\n  startSort = (event) => {\n    this.setState({ search: event.target.value }, () => {\n      this.sortEmp();\n      this.setState({ sorted: true });\n    });\n  };\n\n  render = () => {\n    return (\n      <div className=\"background\">\n        <div className=\"jumbotron jumbotron-fluid\">\n          <h2 className=\"display-4\">Employee Directory</h2>\n          <p> Search for an employee by entering their name or email below.</p>\n          <Search name=\"search\" startSort={this.startSort} label=\"Search\" />\n        </div>\n\n        <div className=\"container-fluid\">\n          <table className=\"table table-light table-striped table-hover table-bordered table-condensed\">\n            <thead className=\"thead\">\n              <tr>\n                <th>Image</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Phone</th>\n                <th>DOB</th>\n                <th>Address</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                \n                !this.state.sorted\n                  ? this.state.employees.map((employee) => (\n                      <Employees\n                        key={employee.id.value}\n                        firstName={employee.name.first}\n                        lastName={employee.name.last}\n                        phone={employee.phone}\n                        email={employee.email}\n                        icon={employee.picture.medium}\n                        dob={employee.dob.date}\n                        address={\n                          employee.location.street.number +\n                          \" \" +\n                          employee.location.street.name +\n                          \", \" +\n                          employee.location.city +\n                          \", \" +\n                          employee.location.state +\n                          \" \" +\n                          employee.location.postcode\n                        }\n                      />\n                    ))\n                  : \n                    this.state.empSort.map((employee) => (\n                      <Employees\n                        key={employee.id.value}\n                        firstName={employee.name.first}\n                        lastName={employee.name.last}\n                        phone={employee.phone}\n                        email={employee.email}\n                        icon={employee.picture.medium}\n                        dob={employee.dob.date}\n                        address={\n                          employee.location.street.number +\n                          employee.location.street.name\n                        }\n                      />\n                    ))\n              }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default Directory;\n","import React from \"react\";\nimport Directory from \"./components/Directory.js\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Directory />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n"],"sourceRoot":""}